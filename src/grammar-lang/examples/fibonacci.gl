;; Grammar Language Example: Fibonacci
;; Demonstrates recursion and function composition

;; Classic recursive fibonacci
(define fib (integer -> integer)
  (if (<= $1 1)
    $1
    (+ (fib (- $1 1))
       (fib (- $1 2)))))

;; Fibonacci sequence generator
(define fib-seq (integer -> (list integer))
  (if (<= $1 0)
    (empty-list)
    (cons (fib $1) (fib-seq (- $1 1)))))

;; Fast fibonacci using iteration (to be implemented)
;; (define fib-fast (integer -> integer)
;;   (fib-iter $1 0 1))

;; (define fib-iter (integer integer integer -> integer)
;;   (if (= $1 0)
;;     $2
;;     (fib-iter (- $1 1) $3 (+ $2 $3))))

;; Check if number is in fibonacci sequence
(define is-fibonacci? (integer -> boolean)
  (if (<= $1 0)
    false
    (if (= $1 (fib (fib-index $1 0)))
      true
      false)))

;; Helper to find fibonacci index
(define fib-index (integer integer -> integer)
  (if (>= (fib $2) $1)
    $2
    (fib-index $1 (+ $2 1))))
